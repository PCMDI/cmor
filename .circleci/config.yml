version: 2.1

checkout:
  post:
    - ./ci-support/checkout_merge_commit.sh
        
aliases:

  - &pull_submodules
    name: pull_submodules
    command: |
      git submodule init
      git submodule update

  - &setup_miniconda
    name: setup_miniconda
    command: |
      if [[ $OS == 'osx-64' ]]; then
        curl -L https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh -o miniconda.sh
      else
        curl -L https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -o miniconda.sh
      fi
      bash miniconda.sh -b -p `pwd`/$WORKDIR/miniconda
       
  - &conda_rerender
    name: conda_rerender
    command: |
       source `pwd`/$WORKDIR/miniconda/etc/profile.d/conda.sh
       conda activate base
       conda config --set anaconda_upload no

       git clone -b master https://github.com/CDAT/conda-recipes `pwd`/$WORKDIR/conda-recipes
       export BUILD_SCRIPT=`pwd`/$WORKDIR/conda-recipes/build_tools/conda_build.py
       export ACTIVATE=`pwd`/$WORKDIR/miniconda/bin/activate

       python $BUILD_SCRIPT -w `pwd`/$WORKDIR -l $VERSION -B 0 -p $PKG_NAME -r $PKG_NAME -b $CIRCLE_BRANCH \
        --do_rerender --conda_env base --ignore_conda_missmatch --conda_activate $ACTIVATE --organization PCMDI
       
  - &conda_build
    name: conda_build
    command: |
       source `pwd`/$WORKDIR/miniconda/etc/profile.d/conda.sh
       conda activate base
       conda config --set anaconda_upload no

       export ARTIFACT_DIR=`pwd`/artifacts.$OS.py_$PYTHON_VERSION
       mkdir $ARTIFACT_DIR
       
       export CONDA_BUILD_EXTRA=" --copy_conda_package $ARTIFACT_DIR/"
       export BUILD_SCRIPT=`pwd`/$WORKDIR/conda-recipes/build_tools/conda_build.py
       export ACTIVATE=`pwd`/$WORKDIR/miniconda/bin/activate

       python $BUILD_SCRIPT -w `pwd`/$WORKDIR -p $PKG_NAME --build_version $PYTHON_VERSION --do_build \
        --conda_env base --extra_channels conda-forge --conda_activate $ACTIVATE $CONDA_BUILD_EXTRA

  - &run_cmor_tests
    name: run_cmor_tests
    command: |
       source `pwd`/$WORKDIR/miniconda/etc/profile.d/conda.sh
       conda activate base
       export UVCDAT_ANONYMOUS_LOG=False
       set +e
       conda create -y -n py$PYTHON_VERSION --use-local $CHANNELS python=$PYTHON_VERSION $PKG_NAME $PKGS $CONDA_COMPILERS
       conda activate py$PYTHON_VERSION
       set -e
       ./configure --prefix=$CONDA_PREFIX --with-python --with-uuid=$CONDA_PREFIX --with-json-c=$CONDA_PREFIX --with-udunits2=$CONDA_PREFIX --with-netcdf=$CONDA_PREFIX  --enable-verbose-test
       make test -o cmor -o python

  - &run_cmor_tests_with_cdms2
    name: run_cmor_tests_with_cdms2
    command: |
       source `pwd`/$WORKDIR/miniconda/etc/profile.d/conda.sh
       conda activate base
       export UVCDAT_ANONYMOUS_LOG=False
       # run tests again but with cdms2 installed
       set +e
       conda create -y -n py$PYTHON_VERSION_cdms2 --use-local $CHANNELS python=$PYTHON_VERSION $PKG_NAME $PKGS $CONDA_COMPILERS cdms2
       conda activate py$PYTHON_VERSION_cdms2
       set -e
       make test -o cmor -o python

  - &run_prepare_tests
    name: run_prepare_tests
    command: |
       source `pwd`/$WORKDIR/miniconda/etc/profile.d/conda.sh
       conda activate base
       export UVCDAT_ANONYMOUS_LOG=False
       set +e
       conda activate py$PYTHON_VERSION_cdms2
       set -e
       export PYTHONPATH=Test/:$PYTHONPATH
       for file in `ls -1 Test/test_python_CMIP6_CV*.py`; do echo $file; python $file; mystatus=$?; if [[ "$mystatus" != "0" ]]; then return ${mystatus}; fi; done
       python run_tests.py -v2 -H -n1 Test/test_python_CMIP6_CV*.py
       
  - &conda_upload
    name: conda_upload
    command: |
       source `pwd`/$WORKDIR/miniconda/etc/profile.d/conda.sh
       conda activate base
       conda config --set anaconda_upload no
       export CONDA_BLD_PATH=`pwd`/$WORKDIR/miniconda/conda-bld
       ls $CONDA_BLD_PATH/$OS/$PKG_NAME-$VERSION.*.tar.bz2
       if [[ $CIRCLE_BRANCH != 'master' ]]; then
          exit 0
       fi
       anaconda -t $CONDA_UPLOAD_TOKEN upload -u $USER -l $LABEL $CONDA_BLD_PATH/$OS/$PKG_NAME-$VERSION.*.tar.bz2 --force


jobs:
  macos_setup:
    macos:
      xcode: "11.4.0"
    environment:
      OS: "osx-64"
      WORKDIR: "macos_build"
    steps:
      - checkout
      - run: *setup_miniconda
      - persist_to_workspace:
          root: .
          paths: 
            - macos_build

  linux_setup:
    machine:
      image: circleci/classic:latest
    environment:
      OS: "linux-64"
      WORKDIR: "linux_build"
    steps:
      - checkout
      - run: *setup_miniconda
      - persist_to_workspace:
          root: .
          paths:
            - linux_build

  macos_cmor_py36:
    macos:
      xcode: "11.4.0"
    environment:
      OS: "osx-64"
      PKG_NAME: "cmor"
      VERSION: "3.6.0"
      LABEL: "nightly"
      PYTHON_VERSION: "3.6"
      CHANNELS: "-c cdat/label/nightly -c conda-forge -c cdat"
      PKGS: " lazy-object-proxy testsrunner"
      CONDA_COMPILERS: "clang_osx-64==10.0.1 gfortran_osx-64>=7.5"
      WORKDIR: "macos_build"
    steps:
      - checkout
      - run: *pull_submodules
      - attach_workspace:
          at: .
      - run: *conda_rerender
      - run: *conda_build
      - run: *run_cmor_tests
      - run: *run_cmor_tests_with_cdms2
      - run: *run_prepare_tests
      - persist_to_workspace:
          root: .
          paths:
              - macos_build/miniconda/conda-bld/osx-64/cmor*.tar.bz2

  macos_cmor_py37:
    macos:
      xcode: "11.4.0"
    environment:
      OS: "osx-64"
      PKG_NAME: "cmor"
      VERSION: "3.6.0"
      LABEL: "nightly"
      PYTHON_VERSION: "3.7"
      CHANNELS: "-c cdat/label/nightly -c conda-forge -c cdat"
      PKGS: " lazy-object-proxy testsrunner"
      CONDA_COMPILERS: "clang_osx-64==10.0.1 gfortran_osx-64>=7.5"
      WORKDIR: "macos_build"
    steps:
      - checkout
      - run: *pull_submodules
      - attach_workspace:
          at: .
      - run: *conda_rerender
      - run: *conda_build
      - run: *run_cmor_tests
      - run: *run_cmor_tests_with_cdms2
      - run: *run_prepare_tests
      - persist_to_workspace:
          root: .
          paths:
              - macos_build/miniconda/conda-bld/osx-64/cmor*.tar.bz2

  macos_cmor_py38:
    macos:
      xcode: "11.4.0"
    environment:
      OS: "osx-64"
      PKG_NAME: "cmor"
      VERSION: "3.6.0"
      LABEL: "nightly"
      PYTHON_VERSION: "3.8"
      CHANNELS: "-c cdat/label/nightly -c conda-forge -c cdat"
      PKGS: " lazy-object-proxy testsrunner"
      CONDA_COMPILERS: "clang_osx-64==10.0.1 gfortran_osx-64>=7.5"
      WORKDIR: "macos_build"
    steps:
      - checkout
      - run: *pull_submodules
      - attach_workspace:
          at: .
      - run: *conda_rerender
      - run: *conda_build
      - run: *run_cmor_tests
      - run: *run_cmor_tests_with_cdms2
      - run: *run_prepare_tests
      - persist_to_workspace:
          root: .
          paths:
              - macos_build/miniconda/conda-bld/osx-64/cmor*.tar.bz2

  linux_cmor_py36:
    machine:
      image: circleci/classic:latest
    environment:
      OS: "linux-64"
      PKG_NAME: "cmor"
      VERSION: "3.6.0"
      LABEL: "nightly"
      PYTHON_VERSION: "3.6"
      CHANNELS: "-c cdat/label/nightly -c conda-forge -c cdat"
      PKGS: " lazy-object-proxy testsrunner"
      CONDA_COMPILERS: "gcc_linux-64>=7 gfortran_linux-64>=7.5"
      WORKDIR: "linux_build"
    steps:
      - checkout
      - run: *pull_submodules
      - attach_workspace:
          at: .
      - run: *conda_rerender
      - run: *conda_build
      - run: *run_cmor_tests
      - run: *run_cmor_tests_with_cdms2
      - run: *run_prepare_tests
      - persist_to_workspace:
          root: .
          paths:
              - linux_build/miniconda/conda-bld/linux-64/cmor*.tar.bz2

  linux_cmor_py37:
    machine:
      image: circleci/classic:latest
    environment:
      OS: "linux-64"
      PKG_NAME: "cmor"
      VERSION: "3.6.0"
      LABEL: "nightly"
      PYTHON_VERSION: "3.7"
      CHANNELS: "-c cdat/label/nightly -c conda-forge -c cdat"
      PKGS: " lazy-object-proxy testsrunner"
      CONDA_COMPILERS: "gcc_linux-64>=7 gfortran_linux-64>=7.5"
      WORKDIR: "linux_build"
    steps:
      - checkout
      - run: *pull_submodules
      - attach_workspace:
          at: .
      - run: *conda_rerender
      - run: *conda_build
      - run: *run_cmor_tests
      - run: *run_cmor_tests_with_cdms2
      - run: *run_prepare_tests
      - persist_to_workspace:
          root: .
          paths:
              - linux_build/miniconda/conda-bld/linux-64/cmor*.tar.bz2

  linux_cmor_py38:
    machine:
      image: circleci/classic:latest
    environment:
      OS: "linux-64"
      PKG_NAME: "cmor"
      VERSION: "3.6.0"
      LABEL: "nightly"
      PYTHON_VERSION: "3.8"
      CHANNELS: "-c cdat/label/nightly -c conda-forge -c cdat"
      PKGS: " lazy-object-proxy testsrunner"
      CONDA_COMPILERS: "gcc_linux-64>=7 gfortran_linux-64>=7.5"
      WORKDIR: "linux_build"
    steps:
      - checkout
      - run: *pull_submodules
      - attach_workspace:
          at: .
      - run: *conda_rerender
      - run: *conda_build
      - run: *run_cmor_tests
      - run: *run_cmor_tests_with_cdms2
      - run: *run_prepare_tests
      - persist_to_workspace:
          root: .
          paths:
              - linux_build/miniconda/conda-bld/linux-64/cmor*.tar.bz2

  macos_upload:
    macos:
      xcode: "11.4.0"
    environment:
      OS: "osx-64"
      WORKDIR: "macos_build"
      PKG_NAME: "cmor"
      VERSION: "3.6.0"
      USER: "pcmdi"
      LABEL: "nightly"
    steps:
      - attach_workspace:
          at: .
      - run: pwd
      - run: *conda_upload
      
  linux_upload:
    machine:
      image: circleci/classic:latest
    environment:
      OS: "linux-64"
      WORKDIR: "linux_build"
      PKG_NAME: "cmor"
      VERSION: "3.6.0"
      USER: "pcmdi"
      LABEL: "nightly"
    steps:
      - attach_workspace:
          at: .
      - run: pwd
      - run: *conda_upload

workflows:
  version: 2
  nightly:
    jobs:
      - macos_setup
      - linux_setup
      - macos_cmor_py36:
          requires:
            - macos_setup
      - macos_cmor_py37:
          requires:
            - macos_setup
      - macos_cmor_py38:
          requires:
            - macos_setup
      - linux_cmor_py36:
          requires:
            - linux_setup
      - linux_cmor_py37:
          requires:
            - linux_setup
      - linux_cmor_py38:
          requires:
            - linux_setup
      - macos_upload:
          requires:
            - macos_cmor_py36
            - macos_cmor_py37
            - macos_cmor_py38
          filters:
            branches:
              only: master
      - linux_upload:
          requires:
            - linux_cmor_py36
            - linux_cmor_py37
            - linux_cmor_py38
          filters:
            branches:
              only: master