version: 2.1

checkout:
  post:
    - ./ci-support/checkout_merge_commit.sh
        
aliases:
  - &setup_env
    name: setup_env
    command: |
       echo "export WORKDIR=`pwd`/$PROJECT_DIR" >> $BASH_ENV
       source $BASH_ENV
       mkdir -p $WORKDIR

  - &pull_submodules
    name: pull_submodules
    command: |
      git submodule init
      git submodule update

  - &setup_miniconda
    name: setup_miniconda
    command: |
       source $BASH_ENV
       if [[ $OS == 'osx-arm64' ]]; then
          curl -L https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-arm64.sh -o miniconda.sh
       else
          curl -L https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -o miniconda.sh
       fi
       bash miniconda.sh -b -p $WORKDIR/miniconda
       
  - &conda_rerender
    name: conda_rerender
    command: |
       source $BASH_ENV
       source $WORKDIR/miniconda/etc/profile.d/conda.sh
       conda activate base
       conda config --set anaconda_upload no

       git clone -b main https://github.com/conda-forge/cmor-feedstock $WORKDIR/cmor-feedstock
       export SRC_META_YAML=$WORKDIR/cmor-feedstock/recipe/meta.yaml.SRC
       export DST_META_YAML=$WORKDIR/cmor-feedstock/recipe/meta.yaml
       mv $DST_META_YAML $SRC_META_YAML

       export GIT_REV=$(git rev-parse --short HEAD)

       python rebuild_meta_yaml.py \
        --package_name $PKG_NAME \
        --version $VERSION \
        --organization PCMDI \
        --repo_name $PKG_NAME \
        --branch $CIRCLE_BRANCH \
        --git_rev $GIT_REV \
        --build 0 \
        --src_meta_yaml $SRC_META_YAML \
        --dst_meta_yaml $DST_META_YAML

       conda create -y -n smithy_env -c conda-forge conda-smithy
       conda activate smithy_env
       cd $WORKDIR/cmor-feedstock
       conda smithy rerender
       
  - &conda_build
    name: conda_build
    command: |
       source $BASH_ENV
       source $WORKDIR/miniconda/etc/profile.d/conda.sh
       conda activate base
       conda config --set anaconda_upload no
       conda activate smithy_env

       export BUILD_DIR=`pwd`/cmor_conda_pkgs
       mkdir -p $BUILD_DIR

       export ARTIFACT_DIR=`pwd`/artifacts/$OS
       mkdir -p $ARTIFACT_DIR

       if [[ $OS == 'osx-arm64' ]]; then
          export OS_NAME="osx_arm64"
       else
          export OS_NAME="linux_64"
       fi

       for i in ${WORKDIR}'/cmor-feedstock/.ci_support/'${OS_NAME}'_*python'${PYTHON_VERSION}'*.yaml'; do
          conda build -c conda-forge --output-folder $BUILD_DIR -m $i $WORKDIR/cmor-feedstock/recipe/
          cp $BUILD_DIR/$OS/$PKG_NAME-$VERSION*.tar.bz2 $ARTIFACT_DIR
       done

  - &run_cmor_tests
    name: run_cmor_tests
    command: |
       source $BASH_ENV
       source $WORKDIR/miniconda/etc/profile.d/conda.sh
       conda activate base
       export CMOR_CHANNEL=`pwd`/cmor_conda_pkgs/
       conda search -c file://$CMOR_CHANNEL --override-channels
       set +e
       conda create -y -n test_py$PYTHON_VERSION -c file://$CMOR_CHANNEL $CHANNELS python=$PYTHON_VERSION $PKG_NAME=$VERSION $CONDA_COMPILERS
       conda activate test_py$PYTHON_VERSION
       set -e
       ./configure --prefix=$CONDA_PREFIX --with-python --with-uuid=$CONDA_PREFIX --with-json-c=$CONDA_PREFIX --with-udunits2=$CONDA_PREFIX --with-netcdf=$CONDA_PREFIX  --enable-verbose-test
       make test -o cmor -o python

  - &conda_upload
    name: conda_upload
    command: |
       source $BASH_ENV
       source $WORKDIR/miniconda/etc/profile.d/conda.sh
       conda activate base
       conda config --set anaconda_upload no
       conda install -n base anaconda-client
       export ARTIFACT_DIR=`pwd`/artifacts
       anaconda -t $CONDA_UPLOAD_TOKEN upload -u $USER -l $LABEL $ARTIFACT_DIR/*/*.tar.bz2 --force


executors:
   linux:
      machine:
         image: ubuntu-2204:2024.01.2
      environment:
        OS: "linux-64"
        PROJECT_DIR: "workdir/linux"
        CONDA_COMPILERS: "gcc_linux-64 gfortran_linux-64"
   macos:
      macos:
         xcode: "15.4.0"
      resource_class: macos.m1.medium.gen1
      environment:
        OS: "osx-arm64"
        PROJECT_DIR: "workdir/macos"
        CONDA_COMPILERS: "clang_osx-arm64 gfortran_osx-arm64"
         
jobs:
   build:
      parameters:
         os:
            type: executor
         python_version: 
            type: string
      executor: << parameters.os >>
      environment:
         PKG_NAME: "cmor"
         VERSION: "3.8.0"
         PYTHON_VERSION: << parameters.python_version >>
         CHANNELS: "-c conda-forge"
      steps:
         - checkout
         - attach_workspace:
            at: .
         - run: *setup_env
         - run: *setup_miniconda
         - run: *conda_rerender
         - run: *conda_build
         - run: *pull_submodules
         - run: *run_cmor_tests
         - persist_to_workspace:
            root: .
            paths:
               - artifacts

   upload:
      parameters:
         os:
            type: executor
      executor: << parameters.os >>
      environment:
         USER: "pcmdi"
         LABEL: "nightly"
      steps:
         - checkout
         - attach_workspace:
              at: .
         - run: *setup_env
         - run: *setup_miniconda
         - run: *conda_upload

   testing_upload:
      parameters:
         os:
            type: executor
      executor: << parameters.os >>
      environment:
         USER: "pcmdi"
         LABEL: "testing"
      steps:
         - checkout
         - attach_workspace:
              at: .
         - run: *setup_env
         - run: *setup_miniconda
         - run: *conda_upload

workflows:
   cmor:
      jobs:
         - build:
              matrix:
                 parameters:
                    os: [ linux, macos ]
                    python_version: [ "3.10" ]
              name: build-<< matrix.os >>-<< matrix.python_version >>

         - upload:
              matrix:
                 parameters:
                    os: [ linux ]
              name: upload
              requires:
                 - build
              filters:
                 branches:
                    only: main

         - testing_upload:
              matrix:
                 parameters:
                    os: [ linux ]
              name: testing_upload
              requires:
                 - build
              filters:
                 branches:
                    only: testing