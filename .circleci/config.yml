version: 2.1

checkout:
  post:
    - ./ci-support/checkout_merge_commit.sh
        
aliases:
  - &setup_env
    name: setup_env
    command: |
       echo "export WORKDIR=`pwd`/$PROJECT_DIR" >> $BASH_ENV
       source $BASH_ENV
       mkdir -p $WORKDIR

  - &pull_submodules
    name: pull_submodules
    command: |
      git submodule init
      git submodule update

  - &setup_miniconda
    name: setup_miniconda
    command: |
       source $BASH_ENV
       if [[ $OS == 'osx-64' ]]; then
       curl -L https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh -o miniconda.sh
       else
       curl -L https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -o miniconda.sh
       fi
       bash miniconda.sh -b -p $WORKDIR/miniconda
       
  - &conda_rerender
    name: conda_rerender
    command: |
       source $BASH_ENV
       source $WORKDIR/miniconda/etc/profile.d/conda.sh
       conda activate base
       conda config --set anaconda_upload no

       git clone -b master https://github.com/CDAT/conda-recipes $WORKDIR/conda-recipes
       export BUILD_SCRIPT=$WORKDIR/conda-recipes/build_tools/conda_build.py
       export ACTIVATE=$WORKDIR/miniconda/bin/activate

       python $BUILD_SCRIPT -w $WORKDIR -l $VERSION -B 0 -p $PKG_NAME -r $PKG_NAME -b $CIRCLE_BRANCH \
        --do_rerender --conda_env base --ignore_conda_missmatch --conda_activate $ACTIVATE --organization PCMDI
       
  - &conda_build
    name: conda_build
    command: |
       source $BASH_ENV
       source $WORKDIR/miniconda/etc/profile.d/conda.sh
       conda activate base
       conda config --set anaconda_upload no

       export ARTIFACT_DIR=`pwd`/artifacts/artifacts.$OS.py_$PYTHON_VERSION
       mkdir -p $ARTIFACT_DIR
       
       export CONDA_BUILD_EXTRA=" --copy_conda_package $ARTIFACT_DIR/"
       export BUILD_SCRIPT=$WORKDIR/conda-recipes/build_tools/conda_build.py
       export ACTIVATE=$WORKDIR/miniconda/bin/activate

       python $BUILD_SCRIPT -w $WORKDIR -p $PKG_NAME --build_version $PYTHON_VERSION --do_build \
        --conda_env base --extra_channels conda-forge --conda_activate $ACTIVATE $CONDA_BUILD_EXTRA

  - &run_cmor_tests
    name: run_cmor_tests
    command: |
       source $BASH_ENV
       source $WORKDIR/miniconda/etc/profile.d/conda.sh
       conda activate base
       export UVCDAT_ANONYMOUS_LOG=False
       set +e
       conda create -y -n test_py$PYTHON_VERSION --use-local $CHANNELS python=$PYTHON_VERSION $PKG_NAME=$VERSION $CONDA_COMPILERS
       conda activate test_py$PYTHON_VERSION
       set -e
       ./configure --prefix=$CONDA_PREFIX --with-python --with-uuid=$CONDA_PREFIX --with-json-c=$CONDA_PREFIX --with-udunits2=$CONDA_PREFIX --with-netcdf=$CONDA_PREFIX  --enable-verbose-test
       make test -o cmor -o python

  - &conda_upload
    name: conda_upload
    command: |
       source $BASH_ENV
       source $WORKDIR/miniconda/etc/profile.d/conda.sh
       conda activate base
       conda config --set anaconda_upload no
       conda install -n base anaconda-client
       export ARTIFACT_DIR=`pwd`/artifacts
       anaconda -t $CONDA_UPLOAD_TOKEN upload -u $USER -l $LABEL $ARTIFACT_DIR/*/*.tar.bz2 --force


executors:
   linux:
      machine:
         image: ubuntu-2004:202201-02
      environment:
        OS: "linux-64"
        PROJECT_DIR: "workdir/linux"
        CONDA_COMPILERS: "gcc_linux-64 gfortran_linux-64"
   macos:
      macos:
         xcode: "13.4.1"
      environment:
        OS: "osx-64"
        PROJECT_DIR: "workdir/macos"
        CONDA_COMPILERS: "clang_osx-64 gfortran_osx-64"
         
jobs:
   build:
      parameters:
         os:
            type: executor
         python_version: 
            type: string
      executor: << parameters.os >>
      environment:
         PKG_NAME: "cmor"
         VERSION: "3.7.2"
         PYTHON_VERSION: << parameters.python_version >>
         CHANNELS: "-c conda-forge"
      steps:
         - checkout
         - attach_workspace:
            at: .
         - run: *setup_env
         - run: *setup_miniconda
         - run: *conda_rerender
         - run: *conda_build
         - run: *pull_submodules
         - run: *run_cmor_tests
         - persist_to_workspace:
            root: .
            paths:
               - artifacts

   upload:
      parameters:
         os:
            type: executor
      executor: << parameters.os >>
      environment:
         USER: "pcmdi"
         LABEL: "nightly"
      steps:
         - checkout
         - attach_workspace:
              at: .
         - run: *setup_env
         - run: *setup_miniconda
         - run: *conda_upload

   testing_upload:
      parameters:
         os:
            type: executor
      executor: << parameters.os >>
      environment:
         USER: "pcmdi"
         LABEL: "testing"
      steps:
         - checkout
         - attach_workspace:
              at: .
         - run: *setup_env
         - run: *setup_miniconda
         - run: *conda_upload

workflows:
   cmor:
      jobs:
         - build:
              matrix:
                 parameters:
                    os: [ linux, macos ]
                    python_version: [ "3.8", "3.9", "3.10", "3.11" ]
              name: build-<< matrix.os >>-<< matrix.python_version >>

         - upload:
              matrix:
                 parameters:
                    os: [ linux ]
              name: upload
              requires:
                 - build
              filters:
                 branches:
                    only: master

         - testing_upload:
              matrix:
                 parameters:
                    os: [ linux ]
              name: testing_upload
              requires:
                 - build
              filters:
                 branches:
                    only: testing